# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches:
    include:
      - master
      - main
    exclude:
      - elstupido
      - randombranch
  paths:
    include:
      - 
    exclude:
      - 
variables:
  hello: world
pool:
  vmImage: ubuntu-latest

stages:
  - stage: Mavenpackage
    condition: 
    dependsOn:
    jobs:
      - job: onejob      
        steps:     

        - task: SonarCloudPrepare@1
          displayName: 'Prepare analysis configuration'
          inputs:
            SonarCloud: 'azure-renature-training-uta'
            organization: 'azure-revature-training-uta'
            scannerMode: 'Other'
            projectKey: 'jack-project0'
            projectName: 'jack-project0'
        - task: Maven@3
          inputs:
            mavenPomFile: 'pom.xml'
            mavenOptions: '-Xmx3072m'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.8'
            jdkArchitectureOption: 'x64'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            testRunTitle:  RunningOptionalTests
            allowBrokenSymlink: true
            codeCoverageToolOption: 'JaCoCo' 
            #codeCoverageClassFilter: # Optional. Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*
            #codeCoverageClassFilesDirectories: # Optional
            #codeCoverageSourceDirectories: # Optional
            #codeCoverageFailIfEmpty: false # Optional
            goals: 'package'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
            sonarQubeRunAnalysis: false
            sqMavenPluginVersionChoice: 'latest'
        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '300'
        - task: PublishPipelineMetadata@0

        - task: Docker@2
          displayName: 'dockerize'
          inputs:
            containerRegistry: 'jschuwan_docker_hub'
            repository: 'jschuwan/pipeline'
            command: 'buildAndPush'
            Dockerfile: 'Dockerfile'
            tags: |
              $(Build.BuildId)
              latest

    
